{
  "address": "0xA02Ef143Ac1f98decEa9c82b02e0b88675Dd937c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permissioned",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxMinAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLimitDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaximumMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAssetListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPermissioned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestTokensByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCooldownPeriod",
          "type": "uint256"
        }
      ],
      "name": "setCooldownPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimitDecimal",
          "type": "uint256"
        }
      ],
      "name": "setLimitDecimal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaximumMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setMintable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permissioned",
          "type": "bool"
        }
      ],
      "name": "setPermissioned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "childContracts",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "setProtectedOfChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferAssetToOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "childContracts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnershipOfChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x472a32878af113118377db6ce95dcc94260443a211cfc9eb2234f1dacd7f7985",
  "receipt": {
    "to": null,
    "from": "0xBC0469bE5109D1652D76CCC726f037fD62bd1f30",
    "contractAddress": "0xA02Ef143Ac1f98decEa9c82b02e0b88675Dd937c",
    "transactionIndex": 1,
    "gasUsed": "2003079",
    "logsBloom": "0x
    "blockHash": "0x023626d43082247974a91e2ccf678ba6a6a3ddbf8ca350604d9e7ef2902de526",
    "transactionHash": "0x472a32878af113118377db6ce95dcc94260443a211cfc9eb2234f1dacd7f7985",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2850915,
        "transactionHash": "0x472a32878af113118377db6ce95dcc94260443a211cfc9eb2234f1dacd7f7985",
        "address": "0xA02Ef143Ac1f98decEa9c82b02e0b88675Dd937c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bc0469be5109d1652d76ccc726f037fd62bd1f30"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x023626d43082247974a91e2ccf678ba6a6a3ddbf8ca350604d9e7ef2902de526"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 2850915,
        "transactionHash": "0x472a32878af113118377db6ce95dcc94260443a211cfc9eb2234f1dacd7f7985",
        "address": "0xA02Ef143Ac1f98decEa9c82b02e0b88675Dd937c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000bc0469be5109d1652d76ccc726f037fd62bd1f30",
          "0x000000000000000000000000bc0469be5109d1652d76ccc726f037fd62bd1f30"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x023626d43082247974a91e2ccf678ba6a6a3ddbf8ca350604d9e7ef2902de526"
      }
    ],
    "blockNumber": 2850915,
    "cumulativeGasUsed": "2046933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBC0469bE5109D1652D76CCC726f037fD62bd1f30",
    false,
    10000
  ],
  "numDeployments": 1,
  "solcInputHash": "47274ab41720418130c606fd62d87c3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxMinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAssetListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPermissioned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestTokensByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"setCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitDecimal\",\"type\":\"uint256\"}],\"name\":\"setLimitDecimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMaximumMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"name\":\"setPermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"childContracts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setProtectedOfChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAssetToOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"childContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ownable Faucet Contract\",\"kind\":\"dev\",\"methods\":{\"addAsset(address)\":{\"params\":{\"asset\":\"The address of the asset to add\"}},\"getAssetList()\":{\"returns\":{\"_0\":\"An array of asset addresses\"}},\"getLimitDecimal()\":{\"returns\":{\"_0\":\"The current limit decimal value\"}},\"getMaximumMintAmount()\":{\"returns\":{\"_0\":\"The maximum amount of tokens per mint allowed (whole tokens)\"}},\"isAssetListed(address)\":{\"params\":{\"asset\":\"The address of the asset to check\"},\"returns\":{\"_0\":\"True if the asset is in the list, false otherwise\"}},\"isMintable(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"True if the asset is mintable, false otherwise\"}},\"isPermissioned()\":{\"returns\":{\"_0\":\"Returns a boolean, if true the mode is enabled, if false is disabled\"}},\"mint(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint\",\"to\":\"The address to send the minted tokens\",\"token\":\"The address of the token to perform the mint\"},\"returns\":{\"_0\":\"The amount minted*\"}},\"mintByOwner(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint\",\"to\":\"The address to send the minted tokens\",\"token\":\"The address of the token to perform the mint\"},\"returns\":{\"_0\":\"The amount minted*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestTokens(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to request\",\"asset\":\"The address of the asset to request\"},\"returns\":{\"_0\":\"The amount of tokens transferred\"}},\"requestTokensByOwner(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to request\",\"asset\":\"The address of the asset to request\",\"to\":\"The address to receive the tokens\"},\"returns\":{\"_0\":\"The amount of tokens transferred\"}},\"setLimitDecimal(uint256)\":{\"params\":{\"newLimitDecimal\":\"The new value of limit decimal\"}},\"setMaximumMintAmount(uint256)\":{\"params\":{\"newMaxMintAmount\":\"The new value of maximum amount of tokens per mint (whole tokens)\"}},\"setMintable(address,bool)\":{\"params\":{\"active\":\"True to enable, false to disable\",\"asset\":\"The address of the asset\"}},\"setProtectedOfChild(address[],bool)\":{\"params\":{\"childContracts\":\"A list of child token contract addresses\",\"state\":\"True if tokens are only mintable through Faucet, false otherwise\"}},\"transferAssetToOwner(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to transfer\",\"asset\":\"The address of the asset to transfer\"},\"returns\":{\"_0\":\"The amount of tokens transferred\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferOwnershipOfChild(address[],address)\":{\"params\":{\"childContracts\":\"A list of child contract addresses\",\"newOwner\":\"The address of the new owner\"}}},\"title\":\"Faucet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAsset(address)\":{\"notice\":\"Adds a new asset to the assetList\"},\"getAssetList()\":{\"notice\":\"Gets the entire assetList\"},\"getLimitDecimal()\":{\"notice\":\"Returns the current limit decimal value\"},\"getMaximumMintAmount()\":{\"notice\":\"Returns the maximum amount of tokens per mint allowed\"},\"isAssetListed(address)\":{\"notice\":\"Checks if an asset is in the assetList\"},\"isMintable(address)\":{\"notice\":\"Returns whether the asset is mintable\"},\"isPermissioned()\":{\"notice\":\"Getter to determine if permissioned mode is enabled or disabled\"},\"mint(address,address,uint256)\":{\"notice\":\"Function to mint Testnet tokens to the destination address\"},\"mintByOwner(address,address,uint256)\":{\"notice\":\"Function to mint Testnet tokens to the destination address, only callable by owner\"},\"requestTokens(address,uint256)\":{\"notice\":\"Requests tokens from the faucet\"},\"requestTokensByOwner(address,address,uint256)\":{\"notice\":\"Requests tokens from the faucet by the owner, bypassing restrictions\"},\"setLimitDecimal(uint256)\":{\"notice\":\"Updates the limit decimal for maximum mint amount calculation\"},\"setMaximumMintAmount(uint256)\":{\"notice\":\"Updates the maximum amount of tokens per mint allowed\"},\"setMintable(address,bool)\":{\"notice\":\"Enable or disable the minting of the faucet asset\"},\"setProtectedOfChild(address[],bool)\":{\"notice\":\"Updates protection of minting feature of child token contracts\"},\"transferAssetToOwner(address,uint256)\":{\"notice\":\"Transfers a specified amount of an asset back to the owner\"},\"transferOwnershipOfChild(address[],address)\":{\"notice\":\"Transfer the ownership of child contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data\\n  ) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4ce20476966f73ba3c0aeb85b602b6ecc4e715f5bd9524d1c6286819282c76c5\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xc0df5ebb2c3d8b4509464c40a88cc51e5e5f5e4a26fafc909330e9bb2658f641\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\nimport './IERC20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(\\n    address spender,\\n    uint256 subtractedValue\\n  ) public virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0x84e6a151684cce31e66c850677f7e9455d694e050e409e5ded05fb5528c6c7e4\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf57d62241e553696a1324d225663ba2e1a51db0a51ca236d0c1b009d89b6284c\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x3ce185c4f579e32006f8893dbfdc1b5d878c0e2cafd1508f7ceb081698bc81f9\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary SafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    unchecked {\\n      require((z = x + y) >= x);\\n    }\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    unchecked {\\n      require((z = x - y) <= x);\\n    }\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @param message The error msg\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y, string memory message) internal pure returns (uint256 z) {\\n    unchecked {\\n      require((z = x - y) <= x, message);\\n    }\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    unchecked {\\n      require(x == 0 || (z = x * y) / x == y);\\n    }\\n  }\\n\\n  /// @notice Returns x / y, reverts if overflows - no specific check, solidity reverts on division by 0\\n  /// @param x The numerator\\n  /// @param y The denominator\\n  /// @return z The product of x and y\\n  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x / y;\\n  }\\n}\\n\",\"keccak256\":\"0xf1c5d8ba70a5fc3e20dbbc2aa2a2278d2535a57bc1e9abf1228ebc3068a045f0\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfb041570f1804648f543be72cecc80ca9f65129232bacaa9247ebd11a7d9f83e\",\"license\":\"AGPL-3.0\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {TestnetERC20} from \\\"./TestnetERC20.sol\\\";\\nimport {IERC20} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IFaucet} from \\\"./IFaucet.sol\\\";\\n\\n/**\\n * @title Faucet\\n * @dev Ownable Faucet Contract\\n */\\ncontract Faucet is IFaucet, Ownable {\\n    uint256 internal maximumMintAmount;\\n    uint256 internal limitDecimal;\\n    mapping(address => bool) internal _nonMintable;\\n    address[] internal assetList;\\n\\n    // If _permissioned is enabled, then only owner can mint Testnet ERC20 tokens\\n    // If disabled, anyone can call mint at the faucet, for PoC environments\\n    bool internal _permissioned;\\n\\n    // New mapping to track last mint/request time for each address\\n    mapping(address => uint256) private lastActionTime;\\n\\n    // Add this state variable\\n    uint256 public cooldownPeriod = 1 hours;\\n\\n    constructor(address owner, bool permissioned, uint256 maxMinAmount) {\\n        require(owner != address(0));\\n        transferOwnership(owner);\\n        _permissioned = permissioned;\\n        maximumMintAmount = maxMinAmount;\\n    }\\n\\n    /**\\n     * @dev Function modifier, if _permissioned is enabled then msg.sender is required to be the owner\\n     */\\n    modifier onlyOwnerIfPermissioned() {\\n        if (_permissioned == true) {\\n            require(\\n                owner() == _msgSender(),\\n                \\\"Ownable: caller is not the owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    // Update the modifier\\n    modifier oncePerCooldownPeriod() {\\n        require(\\n            block.timestamp >= lastActionTime[msg.sender] + cooldownPeriod,\\n            \\\"Error: Can only perform this action once per cooldown period\\\"\\n        );\\n        _;\\n        lastActionTime[msg.sender] = block.timestamp;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function mint(\\n        address token,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        onlyOwnerIfPermissioned\\n        oncePerCooldownPeriod\\n        returns (uint256)\\n    {\\n        require(!_nonMintable[token], \\\"Error: not mintable\\\");\\n        require(\\n            amount <=\\n                maximumMintAmount *\\n                    (10 ** (TestnetERC20(token).decimals() - limitDecimal)),\\n            \\\"Error: Mint limit transaction exceeded\\\"\\n        );\\n\\n        TestnetERC20(token).mint(to, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function mintByOwner(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOwner returns (uint256) {\\n        require(!_nonMintable[token], \\\"Error: not mintable\\\");\\n        TestnetERC20(token).mint(to, amount);\\n        return amount;\\n    }\\n\\n    function setPermissioned(bool permissioned) external override onlyOwner {\\n        _permissioned = permissioned;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function isPermissioned() external view override returns (bool) {\\n        return _permissioned;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setMintable(\\n        address asset,\\n        bool active\\n    ) external override onlyOwner {\\n        _nonMintable[asset] = !active;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function isMintable(address asset) external view override returns (bool) {\\n        return !_nonMintable[asset];\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function transferOwnershipOfChild(\\n        address[] calldata childContracts,\\n        address newOwner\\n    ) external override onlyOwner {\\n        for (uint256 i = 0; i < childContracts.length; i++) {\\n            Ownable(childContracts[i]).transferOwnership(newOwner);\\n        }\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setProtectedOfChild(\\n        address[] calldata childContracts,\\n        bool state\\n    ) external override onlyOwner {\\n        for (uint256 i = 0; i < childContracts.length; i++) {\\n            TestnetERC20(childContracts[i]).setProtected(state);\\n        }\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setMaximumMintAmount(\\n        uint256 newMaxMintAmount\\n    ) external override onlyOwner {\\n        maximumMintAmount = newMaxMintAmount;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function getMaximumMintAmount() external view override returns (uint256) {\\n        return maximumMintAmount;\\n    }\\n\\n    /// @notice Adds a new asset to the assetList\\n    /// @param asset The address of the asset to add\\n    function addAsset(address asset) external onlyOwner {\\n        assetList.push(asset);\\n    }\\n\\n    /// @notice Gets the entire assetList\\n    /// @return An array of asset addresses\\n    function getAssetList() external view returns (address[] memory) {\\n        return assetList;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setLimitDecimal(\\n        uint256 newLimitDecimal\\n    ) external override onlyOwner {\\n        limitDecimal = newLimitDecimal;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function getLimitDecimal() external view override returns (uint256) {\\n        return limitDecimal;\\n    }\\n\\n    /// @notice Requests tokens from the faucet\\n    /// @param asset The address of the asset to request\\n    /// @param amount The amount of tokens to request\\n    /// @return The amount of tokens transferred\\n    function requestTokens(\\n        address asset,\\n        uint256 amount\\n    ) external oncePerCooldownPeriod returns (uint256) {\\n        require(isAssetListed(asset), \\\"Error: Asset not listed\\\");\\n        require(\\n            amount <=\\n                maximumMintAmount *\\n                    (10 ** (TestnetERC20(asset).decimals() - limitDecimal)),\\n            \\\"Error: Amount exceeds maximum mint amount\\\"\\n        );\\n\\n        uint256 balance = IERC20(asset).balanceOf(address(this));\\n        require(balance >= amount, \\\"Error: Insufficient faucet balance\\\");\\n\\n        IERC20(asset).transfer(msg.sender, amount);\\n        return amount;\\n    }\\n\\n    /// @notice Requests tokens from the faucet by the owner, bypassing restrictions\\n    /// @param asset The address of the asset to request\\n    /// @param to The address to receive the tokens\\n    /// @param amount The amount of tokens to request\\n    /// @return The amount of tokens transferred\\n    function requestTokensByOwner(\\n        address asset,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner returns (uint256) {\\n        require(isAssetListed(asset), \\\"Error: Asset not listed\\\");\\n        uint256 balance = IERC20(asset).balanceOf(address(this));\\n        require(balance >= amount, \\\"Error: Insufficient faucet balance\\\");\\n\\n        IERC20(asset).transfer(to, amount);\\n        return amount;\\n    }\\n\\n    /// @notice Checks if an asset is in the assetList\\n    /// @param asset The address of the asset to check\\n    /// @return True if the asset is in the list, false otherwise\\n    function isAssetListed(address asset) public view returns (bool) {\\n        for (uint256 i = 0; i < assetList.length; i++) {\\n            if (assetList[i] == asset) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Transfers a specified amount of an asset back to the owner\\n    /// @param asset The address of the asset to transfer\\n    /// @param amount The amount of tokens to transfer\\n    /// @return The amount of tokens transferred\\n    function transferAssetToOwner(\\n        address asset,\\n        uint256 amount\\n    ) external onlyOwner returns (uint256) {\\n        require(isAssetListed(asset), \\\"Error: Asset not listed\\\");\\n        uint256 balance = IERC20(asset).balanceOf(address(this));\\n        require(balance >= amount, \\\"Error: Insufficient faucet balance\\\");\\n\\n        IERC20(asset).transfer(owner(), amount);\\n        return amount;\\n    }\\n\\n    // Add this function to allow the owner to set the cooldown period\\n    function setCooldownPeriod(uint256 newCooldownPeriod) external onlyOwner {\\n        cooldownPeriod = newCooldownPeriod;\\n    }\\n}\\n\",\"keccak256\":\"0xc7d93a332202ce642f3126946433b5ffc0cb6763147ca9faf75a2fcdaf67f271\",\"license\":\"BUSL-1.1\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/IFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IFaucet {\\n    /**\\n     * @notice Function to mint Testnet tokens to the destination address\\n     * @param token The address of the token to perform the mint\\n     * @param to The address to send the minted tokens\\n     * @param amount The amount of tokens to mint\\n     * @return The amount minted\\n     **/\\n    function mint(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Enable or disable the need of authentication to call `mint` function\\n     * @param value If true, ask for authentication at `mint` function, if false, disable the authentication\\n     */\\n    function setPermissioned(bool value) external;\\n\\n    /**\\n     * @notice Getter to determine if permissioned mode is enabled or disabled\\n     * @return Returns a boolean, if true the mode is enabled, if false is disabled\\n     */\\n    function isPermissioned() external view returns (bool);\\n\\n    /**\\n     * @notice Enable or disable the minting of the faucet asset\\n     * @param asset The address of the asset\\n     * @param active True to enable, false to disable\\n     */\\n    function setMintable(address asset, bool active) external;\\n\\n    /**\\n     * @notice Returns whether the asset is mintable\\n     * @param asset The address of the asset\\n     * @return True if the asset is mintable, false otherwise\\n     */\\n    function isMintable(address asset) external view returns (bool);\\n\\n    /**\\n     * @notice Transfer the ownership of child contracts\\n     * @param childContracts A list of child contract addresses\\n     * @param newOwner The address of the new owner\\n     */\\n    function transferOwnershipOfChild(\\n        address[] calldata childContracts,\\n        address newOwner\\n    ) external;\\n\\n    /**\\n     * @notice Updates protection of minting feature of child token contracts\\n     * @param childContracts A list of child token contract addresses\\n     * @param state True if tokens are only mintable through Faucet, false otherwise\\n     */\\n    function setProtectedOfChild(\\n        address[] calldata childContracts,\\n        bool state\\n    ) external;\\n\\n    /**\\n     * @notice Updates the maximum amount of tokens per mint allowed\\n     * @param newMaxMintAmount The new value of maximum amount of tokens per mint (whole tokens)\\n     */\\n    function setMaximumMintAmount(uint256 newMaxMintAmount) external;\\n\\n    /**\\n     * @notice Returns the maximum amount of tokens per mint allowed\\n     * @return The maximum amount of tokens per mint allowed (whole tokens)\\n     */\\n    function getMaximumMintAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Function to mint Testnet tokens to the destination address, only callable by owner\\n     * @param token The address of the token to perform the mint\\n     * @param to The address to send the minted tokens\\n     * @param amount The amount of tokens to mint\\n     * @return The amount minted\\n     **/\\n    function mintByOwner(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Updates the limit decimal for maximum mint amount calculation\\n     * @param newLimitDecimal The new value of limit decimal\\n     */\\n    function setLimitDecimal(uint256 newLimitDecimal) external;\\n\\n    /**\\n     * @notice Returns the current limit decimal value\\n     * @return The current limit decimal value\\n     */\\n    function getLimitDecimal() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3570295f8656e94a350a0aceeb0b128a5328c7b5704c044051b031f5ebc85a0c\",\"license\":\"BUSL-1.1\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/TestnetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {ERC20} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/ERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"../../../../core-v3/contracts/interfaces/IERC20WithPermit.sol\\\";\\n\\n/**\\n * @title TestnetERC20\\n * @dev ERC20 minting logic\\n */\\ncontract TestnetERC20 is IERC20WithPermit, ERC20, Ownable {\\n    bytes public constant EIP712_REVISION = bytes(\\\"1\\\");\\n    bytes32 internal constant EIP712_DOMAIN =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    // Map of address nonces (address => nonce)\\n    mapping(address => uint256) internal _nonces;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    bool internal _protected;\\n\\n    /**\\n     * @dev Function modifier, if _protected is enabled then msg.sender is required to be the owner\\n     */\\n    modifier onlyOwnerIfProtected() {\\n        if (_protected == true) {\\n            require(\\n                owner() == _msgSender(),\\n                \\\"Ownable: caller is not the owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        uint256 chainId = block.chainid;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN,\\n                keccak256(bytes(name)),\\n                keccak256(EIP712_REVISION),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        _setupDecimals(decimals);\\n        require(owner != address(0));\\n        transferOwnership(owner);\\n        _protected = true;\\n    }\\n\\n    /// @inheritdoc IERC20WithPermit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner != address(0), \\\"INVALID_OWNER\\\");\\n        //solium-disable-next-line\\n        require(block.timestamp <= deadline, \\\"INVALID_EXPIRATION\\\");\\n        uint256 currentValidNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        currentValidNonce,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        require(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n        _nonces[owner] = currentValidNonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(\\n        uint256 value\\n    ) public virtual onlyOwnerIfProtected returns (bool) {\\n        _mint(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens to address\\n     * @param account The account to mint tokens.\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(\\n        address account,\\n        uint256 value\\n    ) public virtual onlyOwnerIfProtected returns (bool) {\\n        _mint(account, value);\\n        return true;\\n    }\\n\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    function setProtected(bool state) public onlyOwner {\\n        _protected = state;\\n    }\\n\\n    function isProtected() public view returns (bool) {\\n        return _protected;\\n    }\\n}\\n\",\"keccak256\":\"0x73b068170075d6d4dbbad2f9af07fb3d5c09a1ad27659cf97b1c4f706e160212\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063890d17eb116100e3578063ca51a9031161008c578063e2a4157c11610066578063e2a4157c14610346578063f2fde38b14610351578063f7eb06c41461036457600080fd5b8063ca51a90314610318578063d34b68e71461032b578063dd26b1d31461033e57600080fd5b80639420d476116100bd5780639420d476146102df578063af421564146102f2578063c6c3bbe61461030557600080fd5b8063890d17eb146102915780638da5cb5b146102a45780638dd48fa6146102cc57600080fd5b80633765c0b8116101455780636feca45e1161011f5780636feca45e1461026e578063715018a61461027657806380ea3de11461027e57600080fd5b80633765c0b81461023357806347eaef0114610248578063506f26cc1461025b57600080fd5b80631a678cd3116101765780631a678cd3146101c1578063222b15fb146101d6578063298410e51461022057600080fd5b806304646a49146101925780631081a137146101ae575b600080fd5b61019b60075481565b6040519081526020015b60405180910390f35b61019b6101bc366004611cfd565b610377565b6101d46101cf366004611d38565b61066d565b005b6102106101e4366004611d5c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205460ff161590565b60405190151581526020016101a5565b6101d461022e366004611d5c565b61071f565b61023b610817565b6040516101a59190611d77565b610210610256366004611d5c565b610886565b6101d4610269366004611e1d565b61090a565b60025461019b565b6101d4610a59565b6101d461028c366004611e71565b610b49565b6101d461029f366004611e71565b610bcf565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a5565b61019b6102da366004611e8a565b610c55565b6101d46102ed366004611e71565b610e09565b61019b610300366004611cfd565b610e8f565b61019b610313366004611e8a565b6112a5565b6101d4610326366004611ec6565b61164e565b61019b610339366004611e8a565b611797565b60015461019b565b60055460ff16610210565b6101d461035f366004611d5c565b611a4e565b6101d4610372366004611f1d565b611bff565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146103fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61040783610886565b61046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4572726f723a204173736574206e6f74206c697374656400000000000000000060448201526064016103f5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611f54565b905082811015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4572726f723a20496e73756666696369656e74206661756365742062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016103f5565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6105cb60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018690526044016020604051808303816000875af115801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611f6d565b50829150505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060600480548060200260200160405190810160405280929190818152602001828054801561087c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610851575b5050505050905090565b6000805b600454811015610901578273ffffffffffffffffffffffffffffffffffffffff16600482815481106108be576108be611f8a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156108ef5750600192915050565b806108f981611fe8565b91505061088a565b50600092915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b60005b82811015610a53578383828181106109a8576109a8611f8a565b90506020020160208101906109bd9190611d5c565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919091169063f2fde38b90602401600060405180830381600087803b158015610a2857600080fd5b505af1158015610a3c573d6000803e3d6000fd5b505050508080610a4b90611fe8565b91505061098e565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600755565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600255565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610cd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b73ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff1615610d67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4572726f723a206e6f74206d696e7461626c650000000000000000000000000060448201526064016103f5565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490528516906340c10f19906044016020604051808303816000875af1158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e009190611f6d565b50909392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600155565b600754336000908152600660205260408120549091610ead91612021565b421015610f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f4572726f723a2043616e206f6e6c7920706572666f726d20746869732061637460448201527f696f6e206f6e63652070657220636f6f6c646f776e20706572696f640000000060648201526084016103f5565b610f4583610886565b610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4572726f723a204173736574206e6f74206c697374656400000000000000000060448201526064016103f5565b6002548373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190612039565b60ff1661102a919061205c565b61103590600a612193565b600154611042919061219f565b8211156110d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4572726f723a20416d6f756e742065786365656473206d6178696d756d206d6960448201527f6e7420616d6f756e74000000000000000000000000000000000000000000000060648201526084016103f5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190611f54565b9050828110156111f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4572726f723a20496e73756666696369656e74206661756365742062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016103f5565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff85169063a9059cbb906044016020604051808303816000875af1158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190611f6d565b505033600090815260066020526040902042905550919050565b60055460009060ff161515600114156113395760005473ffffffffffffffffffffffffffffffffffffffff163314611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b600754336000908152600660205260409020546113569190612021565b4210156113e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f4572726f723a2043616e206f6e6c7920706572666f726d20746869732061637460448201527f696f6e206f6e63652070657220636f6f6c646f776e20706572696f640000000060648201526084016103f5565b73ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff1615611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4572726f723a206e6f74206d696e7461626c650000000000000000000000000060448201526064016103f5565b6002548473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190612039565b60ff166114f4919061205c565b6114ff90600a612193565b60015461150c919061219f565b82111561159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4572726f723a204d696e74206c696d6974207472616e73616374696f6e20657860448201527f636565646564000000000000000000000000000000000000000000000000000060648201526084016103f5565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490528516906340c10f19906044016020604051808303816000875af1158015611610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116349190611f6d565b505033600090815260066020526040902042905592915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b60005b82811015610a53578383828181106116ec576116ec611f8a565b90506020020160208101906117019190611d5c565b6040517f1c02bc31000000000000000000000000000000000000000000000000000000008152831515600482015273ffffffffffffffffffffffffffffffffffffffff9190911690631c02bc3190602401600060405180830381600087803b15801561176c57600080fd5b505af1158015611780573d6000803e3d6000fd5b50505050808061178f90611fe8565b9150506116d2565b6000805473ffffffffffffffffffffffffffffffffffffffff163314611819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b61182284610886565b611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4572726f723a204173736574206e6f74206c697374656400000000000000000060448201526064016103f5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156118f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119199190611f54565b9050828110156119ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4572726f723a20496e73756666696369656e74206661756365742062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016103f5565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905286169063a9059cbb906044016020604051808303816000875af1158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190611f6d565b5091949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611acf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b73ffffffffffffffffffffffffffffffffffffffff8116611b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103f5565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115919091179055565b803573ffffffffffffffffffffffffffffffffffffffff81168114611cf857600080fd5b919050565b60008060408385031215611d1057600080fd5b611d1983611cd4565b946020939093013593505050565b8015158114611d3557600080fd5b50565b600060208284031215611d4a57600080fd5b8135611d5581611d27565b9392505050565b600060208284031215611d6e57600080fd5b611d5582611cd4565b6020808252825182820181905260009190848201906040850190845b81811015611dc557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611d93565b50909695505050505050565b60008083601f840112611de357600080fd5b50813567ffffffffffffffff811115611dfb57600080fd5b6020830191508360208260051b8501011115611e1657600080fd5b9250929050565b600080600060408486031215611e3257600080fd5b833567ffffffffffffffff811115611e4957600080fd5b611e5586828701611dd1565b9094509250611e68905060208501611cd4565b90509250925092565b600060208284031215611e8357600080fd5b5035919050565b600080600060608486031215611e9f57600080fd5b611ea884611cd4565b9250611eb660208501611cd4565b9150604084013590509250925092565b600080600060408486031215611edb57600080fd5b833567ffffffffffffffff811115611ef257600080fd5b611efe86828701611dd1565b9094509250506020840135611f1281611d27565b809150509250925092565b60008060408385031215611f3057600080fd5b611f3983611cd4565b91506020830135611f4981611d27565b809150509250929050565b600060208284031215611f6657600080fd5b5051919050565b600060208284031215611f7f57600080fd5b8151611d5581611d27565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561201a5761201a611fb9565b5060010190565b6000821982111561203457612034611fb9565b500190565b60006020828403121561204b57600080fd5b815160ff81168114611d5557600080fd5b60008282101561206e5761206e611fb9565b500390565b600181815b808511156120cc57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156120b2576120b2611fb9565b808516156120bf57918102915b93841c9390800290612078565b509250929050565b6000826120e357506001610667565b816120f057506000610667565b816001811461210657600281146121105761212c565b6001915050610667565b60ff84111561212157612121611fb9565b50506001821b610667565b5060208310610133831016604e8410600b841016171561214f575081810a610667565b6121598383612073565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561218b5761218b611fb9565b029392505050565b6000611d5583836120d4565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121d7576121d7611fb9565b50029056fea264697066735822122040e76ca9c238306422014851f48dd14c45cefb78f708f945146f700de71ec01d64736f6c634300080a0033",
  "devdoc": {
    "details": "Ownable Faucet Contract",
    "kind": "dev",
    "methods": {
      "addAsset(address)": {
        "params": {
          "asset": "The address of the asset to add"
        }
      },
      "getAssetList()": {
        "returns": {
          "_0": "An array of asset addresses"
        }
      },
      "getLimitDecimal()": {
        "returns": {
          "_0": "The current limit decimal value"
        }
      },
      "getMaximumMintAmount()": {
        "returns": {
          "_0": "The maximum amount of tokens per mint allowed (whole tokens)"
        }
      },
      "isAssetListed(address)": {
        "params": {
          "asset": "The address of the asset to check"
        },
        "returns": {
          "_0": "True if the asset is in the list, false otherwise"
        }
      },
      "isMintable(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "True if the asset is mintable, false otherwise"
        }
      },
      "isPermissioned()": {
        "returns": {
          "_0": "Returns a boolean, if true the mode is enabled, if false is disabled"
        }
      },
      "mint(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to mint",
          "to": "The address to send the minted tokens",
          "token": "The address of the token to perform the mint"
        },
        "returns": {
          "_0": "The amount minted*"
        }
      },
      "mintByOwner(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to mint",
          "to": "The address to send the minted tokens",
          "token": "The address of the token to perform the mint"
        },
        "returns": {
          "_0": "The amount minted*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestTokens(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to request",
          "asset": "The address of the asset to request"
        },
        "returns": {
          "_0": "The amount of tokens transferred"
        }
      },
      "requestTokensByOwner(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to request",
          "asset": "The address of the asset to request",
          "to": "The address to receive the tokens"
        },
        "returns": {
          "_0": "The amount of tokens transferred"
        }
      },
      "setLimitDecimal(uint256)": {
        "params": {
          "newLimitDecimal": "The new value of limit decimal"
        }
      },
      "setMaximumMintAmount(uint256)": {
        "params": {
          "newMaxMintAmount": "The new value of maximum amount of tokens per mint (whole tokens)"
        }
      },
      "setMintable(address,bool)": {
        "params": {
          "active": "True to enable, false to disable",
          "asset": "The address of the asset"
        }
      },
      "setProtectedOfChild(address[],bool)": {
        "params": {
          "childContracts": "A list of child token contract addresses",
          "state": "True if tokens are only mintable through Faucet, false otherwise"
        }
      },
      "transferAssetToOwner(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to transfer",
          "asset": "The address of the asset to transfer"
        },
        "returns": {
          "_0": "The amount of tokens transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferOwnershipOfChild(address[],address)": {
        "params": {
          "childContracts": "A list of child contract addresses",
          "newOwner": "The address of the new owner"
        }
      }
    },
    "title": "Faucet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAsset(address)": {
        "notice": "Adds a new asset to the assetList"
      },
      "getAssetList()": {
        "notice": "Gets the entire assetList"
      },
      "getLimitDecimal()": {
        "notice": "Returns the current limit decimal value"
      },
      "getMaximumMintAmount()": {
        "notice": "Returns the maximum amount of tokens per mint allowed"
      },
      "isAssetListed(address)": {
        "notice": "Checks if an asset is in the assetList"
      },
      "isMintable(address)": {
        "notice": "Returns whether the asset is mintable"
      },
      "isPermissioned()": {
        "notice": "Getter to determine if permissioned mode is enabled or disabled"
      },
      "mint(address,address,uint256)": {
        "notice": "Function to mint Testnet tokens to the destination address"
      },
      "mintByOwner(address,address,uint256)": {
        "notice": "Function to mint Testnet tokens to the destination address, only callable by owner"
      },
      "requestTokens(address,uint256)": {
        "notice": "Requests tokens from the faucet"
      },
      "requestTokensByOwner(address,address,uint256)": {
        "notice": "Requests tokens from the faucet by the owner, bypassing restrictions"
      },
      "setLimitDecimal(uint256)": {
        "notice": "Updates the limit decimal for maximum mint amount calculation"
      },
      "setMaximumMintAmount(uint256)": {
        "notice": "Updates the maximum amount of tokens per mint allowed"
      },
      "setMintable(address,bool)": {
        "notice": "Enable or disable the minting of the faucet asset"
      },
      "setProtectedOfChild(address[],bool)": {
        "notice": "Updates protection of minting feature of child token contracts"
      },
      "transferAssetToOwner(address,uint256)": {
        "notice": "Transfers a specified amount of an asset back to the owner"
      },
      "transferOwnershipOfChild(address[],address)": {
        "notice": "Transfer the ownership of child contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1947,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 36475,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "maximumMintAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 36477,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "limitDecimal",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 36481,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_nonMintable",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 36484,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "assetList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36486,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_permissioned",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 36490,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "lastActionTime",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36493,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "cooldownPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}