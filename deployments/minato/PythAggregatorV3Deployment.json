{
  "address": "0xb48F6E0d3ceB7ACba979DEa060Cdff1F623195f9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "aggregators",
          "type": "address[]"
        }
      ],
      "name": "AggregatorsDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pythPriceFeedsContract",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "feedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "deployAggregators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x950fd801ad3d61af0afae0206647392a3d4a1a8cb853d98beebecb515dc58095",
  "receipt": {
    "to": null,
    "from": "0xBC0469bE5109D1652D76CCC726f037fD62bd1f30",
    "contractAddress": "0xb48F6E0d3ceB7ACba979DEa060Cdff1F623195f9",
    "transactionIndex": 2,
    "gasUsed": "1026572",
    "logsBloom": "0x
    "blockHash": "0x4c38fa8979fe0525cf594ec9c4c08dbaa885c17164715a2c7e1e5e57b396fe0f",
    "transactionHash": "0x950fd801ad3d61af0afae0206647392a3d4a1a8cb853d98beebecb515dc58095",
    "logs": [],
    "blockNumber": 2850989,
    "cumulativeGasUsed": "1120274",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "47274ab41720418130c606fd62d87c3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"aggregators\",\"type\":\"address[]\"}],\"name\":\"AggregatorsDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pythPriceFeedsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"feedIds\",\"type\":\"bytes32[]\"}],\"name\":\"deployAggregators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sake/contracts/dependencies/pyth/PythAggregatorV3Deployment.sol\":\"PythAggregatorV3Deployment\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nimport {PythStructs} from \\\"./PythStructs.sol\\\";\\nimport {IPyth} from \\\"./IPyth.sol\\\";\\n\\n// This interface is forked from the Zerolend Adapter found here:\\n// https://github.com/zerolend/pyth-oracles/blob/master/contracts/PythAggregatorV3.sol\\n// Original license found under licenses/zerolend-pyth-oracles.md\\n\\n/**\\n * @title A port of the ChainlinkAggregatorV3 interface that supports Pyth price feeds\\n * @notice This does not store any roundId information on-chain. Please review the code before using this implementation.\\n * Users should deploy an instance of this contract to wrap every price feed id that they need to use.\\n */\\ncontract PythAggregatorV3 {\\n    bytes32 public priceId;\\n    IPyth public pyth;\\n\\n    constructor(address _pyth, bytes32 _priceId) {\\n        priceId = _priceId;\\n        pyth = IPyth(_pyth);\\n    }\\n\\n    // Wrapper function to update the underlying Pyth price feeds. Not part of the AggregatorV3 interface but useful.\\n    function updateFeeds(bytes[] calldata priceUpdateData) public payable {\\n        // Update the prices to the latest available values and pay the required fee for it. The `priceUpdateData` data\\n        // should be retrieved from our off-chain Price Service API using the `pyth-evm-js` package.\\n        // See section \\\"How Pyth Works on EVM Chains\\\" below for more information.\\n        uint fee = pyth.getUpdateFee(priceUpdateData);\\n        pyth.updatePriceFeeds{value: fee}(priceUpdateData);\\n\\n        // refund remaining eth\\n        payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return uint8(-1 * int8(price.expo));\\n    }\\n\\n    function description() public pure returns (string memory) {\\n        return \\\"A port of a chainlink aggregator powered by pyth network feeds\\\";\\n    }\\n\\n    function version() public pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function latestAnswer() public view virtual returns (int256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return int256(price.price);\\n    }\\n\\n    function latestTimestamp() public view returns (uint256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return price.publishTime;\\n    }\\n\\n    function latestRound() public view returns (uint256) {\\n        // use timestamp as the round id\\n        return latestTimestamp();\\n    }\\n\\n    function getAnswer(uint256) public view returns (int256) {\\n        return latestAnswer();\\n    }\\n\\n    function getTimestamp(uint256) external view returns (uint256) {\\n        return latestTimestamp();\\n    }\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return (\\n            _roundId,\\n            int256(price.price),\\n            price.publishTime,\\n            price.publishTime,\\n            _roundId\\n        );\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        roundId = uint80(price.publishTime);\\n        return (\\n            roundId,\\n            int256(price.price),\\n            price.publishTime,\\n            price.publishTime,\\n            roundId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x13d8c3f0492a4463836d00cb9008e0302b4e128bc093cd5ce6ebf563a5230960\",\"license\":\"Apache 2\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/sake/contracts/dependencies/pyth/PythAggregatorV3Deployment.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.10;\\n\\nimport {PythAggregatorV3} from \\\"@pythnetwork/pyth-sdk-solidity/PythAggregatorV3.sol\\\";\\n\\ncontract PythAggregatorV3Deployment {\\n    event AggregatorsDeployed(address[] aggregators);\\n\\n    function deployAggregators(\\n        address pythPriceFeedsContract,\\n        bytes32[] memory feedIds\\n    ) public returns (address[] memory) {\\n        require(feedIds.length > 0, \\\"At least one feed ID is required\\\");\\n\\n        address[] memory aggregatorAddresses = new address[](feedIds.length);\\n\\n        for (uint i = 0; i < feedIds.length; i++) {\\n            PythAggregatorV3 aggregator = new PythAggregatorV3(\\n                pythPriceFeedsContract,\\n                feedIds[i]\\n            );\\n            aggregatorAddresses[i] = address(aggregator);\\n        }\\n\\n        emit AggregatorsDeployed(aggregatorAddresses);\\n\\n        return aggregatorAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0xd3b80c542b75d617a42b44c2d730bcd997cda127f3b7a88aa076a4a17af0d394\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111b0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063be5c5d6714610030575b600080fd5b61004361003e36600461024e565b610059565b6040516100509190610358565b60405180910390f35b606060008251116100ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4174206c65617374206f6e652066656564204944206973207265717569726564604482015260640160405180910390fd5b6000825167ffffffffffffffff8111156100e6576100e661021f565b60405190808252806020026020018201604052801561010f578160200160208202803683370190505b50905060005b83518110156101d357600085858381518110610133576101336103b2565b602002602001015160405161014790610212565b73ffffffffffffffffffffffffffffffffffffffff90921682526020820152604001604051809103906000f080158015610185573d6000803e3d6000fd5b5090508083838151811061019b5761019b6103b2565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015250806101cb816103e1565b915050610115565b507f5342bd4a5508a9ff188f8048eca7e657ce3126b3604f2c2ffc4db802032dd4b6816040516102039190610358565b60405180910390a19392505050565b610d398061044283390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561026157600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461028557600080fd5b915060208381013567ffffffffffffffff808211156102a357600080fd5b818601915086601f8301126102b757600080fd5b8135818111156102c9576102c961021f565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561030c5761030c61021f565b60405291825284820192508381018501918983111561032a57600080fd5b938501935b828510156103485784358452938501939285019261032f565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156103a657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610374565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561043a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50604051610d39380380610d3983398101604081905261002f91610057565b600055600180546001600160a01b0319166001600160a01b0392909216919091179055610091565b6000806040838503121561006a57600080fd5b82516001600160a01b038116811461008157600080fd5b6020939093015192949293505050565b610c99806100a06000396000f3fe6080604052600436106100d25760003560e01c80638205bf6a1161007f578063b633620c11610059578063b633620c14610213578063bc36c0a914610233578063f98d06f014610248578063feaf968c1461029a57600080fd5b80638205bf6a146101875780639a6fc8f51461019c578063b5ab58dc146101f357600080fd5b806354fd4d50116100b057806354fd4d501461013c578063668a0f02146101505780637284e4161461016557600080fd5b806331189334146100d7578063313ce5671461010057806350d25bcd14610127575b600080fd5b3480156100e357600080fd5b506100ed60005481565b6040519081526020015b60405180910390f35b34801561010c57600080fd5b506101156102af565b60405160ff90911681526020016100f7565b34801561013357600080fd5b506100ed610383565b34801561014857600080fd5b5060016100ed565b34801561015c57600080fd5b506100ed610429565b34801561017157600080fd5b5061017a610438565b6040516100f79190610813565b34801561019357600080fd5b506100ed610458565b3480156101a857600080fd5b506101bc6101b7366004610886565b6104fe565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100f7565b3480156101ff57600080fd5b506100ed61020e3660046108b9565b6105c1565b34801561021f57600080fd5b506100ed61022e3660046108b9565b6105d1565b6102466102413660046108d2565b6105db565b005b34801561025457600080fd5b506001546102759073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f7565b3480156102a657600080fd5b506101bc610750565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190610976565b905080604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61037d9190610a4e565b91505090565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190610976565b5160070b92915050565b6000610433610458565b905090565b60606040518060600160405280603e8152602001610c26603e9139905090565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190610976565b6060015192915050565b600154600080546040517f96834ad3000000000000000000000000000000000000000000000000000000008152600481019190915290918291829182918291829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190610976565b8051606090910151979860079190910b97965086955088945092505050565b60006105cb610383565b92915050565b60006105cb610458565b6001546040517fd47eed4500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063d47eed45906106349086908690600401610b36565b602060405180830381865afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190610c0c565b6001546040517fef9e5e2800000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063ef9e5e289083906106d09087908790600401610b36565b6000604051808303818588803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b50506040513393504792509050600081818185875af1925050503d8060008114610743576040519150601f19603f3d011682016040523d82523d6000602084013e610748565b606091505b505050505050565b600154600080546040517f96834ad3000000000000000000000000000000000000000000000000000000008152600481019190915290918291829182918291829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610976565b60608101519051909760079190910b9650879550859450849350915050565b600060208083528351808285015260005b8181101561084057858101830151858201604001528201610824565b81811115610852576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561089857600080fd5b813569ffffffffffffffffffff811681146108b257600080fd5b9392505050565b6000602082840312156108cb57600080fd5b5035919050565b600080602083850312156108e557600080fd5b823567ffffffffffffffff808211156108fd57600080fd5b818501915085601f83011261091157600080fd5b81358181111561092057600080fd5b8660208260051b850101111561093557600080fd5b60209290920196919550909350505050565b805167ffffffffffffffff8116811461095f57600080fd5b919050565b8051600381900b811461095f57600080fd5b60006080828403121561098857600080fd5b6040516080810181811067ffffffffffffffff821117156109d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251600781900b81146109e757600080fd5b81526109f560208401610947565b6020820152610a0660408401610964565b6040820152606083015160608201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008082810b84820b82811383831382607f0484118282161615610a7457610a74610a1f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085841285820585128184161615610aae57610aae610a1f565b9585129583871685830587121615610ac857610ac8610a1f565b84607f0586128188161615610adf57610adf610a1f565b505050910295945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60208082528181018390526000906040600585901b8401810190840186845b87811015610bff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087850301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a3603018112610bb657600080fd5b8901803567ffffffffffffffff811115610bcf57600080fd5b8036038b1315610bde57600080fd5b610beb8682898501610aed565b955050509184019190840190600101610b55565b5091979650505050505050565b600060208284031215610c1e57600080fd5b505191905056fe4120706f7274206f66206120636861696e6c696e6b2061676772656761746f7220706f77657265642062792070797468206e6574776f726b206665656473a26469706673582212206e12860f606bc1b231eadcdbf57802e2f3e4a9330e983ece299358a1977b8c6d64736f6c634300080a0033a2646970667358221220587e5ec2aa5a58389414bbd345215ea56c55e07ff281b1546c961479fae3eeb864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063be5c5d6714610030575b600080fd5b61004361003e36600461024e565b610059565b6040516100509190610358565b60405180910390f35b606060008251116100ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4174206c65617374206f6e652066656564204944206973207265717569726564604482015260640160405180910390fd5b6000825167ffffffffffffffff8111156100e6576100e661021f565b60405190808252806020026020018201604052801561010f578160200160208202803683370190505b50905060005b83518110156101d357600085858381518110610133576101336103b2565b602002602001015160405161014790610212565b73ffffffffffffffffffffffffffffffffffffffff90921682526020820152604001604051809103906000f080158015610185573d6000803e3d6000fd5b5090508083838151811061019b5761019b6103b2565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015250806101cb816103e1565b915050610115565b507f5342bd4a5508a9ff188f8048eca7e657ce3126b3604f2c2ffc4db802032dd4b6816040516102039190610358565b60405180910390a19392505050565b610d398061044283390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561026157600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461028557600080fd5b915060208381013567ffffffffffffffff808211156102a357600080fd5b818601915086601f8301126102b757600080fd5b8135818111156102c9576102c961021f565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561030c5761030c61021f565b60405291825284820192508381018501918983111561032a57600080fd5b938501935b828510156103485784358452938501939285019261032f565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156103a657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610374565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561043a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50604051610d39380380610d3983398101604081905261002f91610057565b600055600180546001600160a01b0319166001600160a01b0392909216919091179055610091565b6000806040838503121561006a57600080fd5b82516001600160a01b038116811461008157600080fd5b6020939093015192949293505050565b610c99806100a06000396000f3fe6080604052600436106100d25760003560e01c80638205bf6a1161007f578063b633620c11610059578063b633620c14610213578063bc36c0a914610233578063f98d06f014610248578063feaf968c1461029a57600080fd5b80638205bf6a146101875780639a6fc8f51461019c578063b5ab58dc146101f357600080fd5b806354fd4d50116100b057806354fd4d501461013c578063668a0f02146101505780637284e4161461016557600080fd5b806331189334146100d7578063313ce5671461010057806350d25bcd14610127575b600080fd5b3480156100e357600080fd5b506100ed60005481565b6040519081526020015b60405180910390f35b34801561010c57600080fd5b506101156102af565b60405160ff90911681526020016100f7565b34801561013357600080fd5b506100ed610383565b34801561014857600080fd5b5060016100ed565b34801561015c57600080fd5b506100ed610429565b34801561017157600080fd5b5061017a610438565b6040516100f79190610813565b34801561019357600080fd5b506100ed610458565b3480156101a857600080fd5b506101bc6101b7366004610886565b6104fe565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100f7565b3480156101ff57600080fd5b506100ed61020e3660046108b9565b6105c1565b34801561021f57600080fd5b506100ed61022e3660046108b9565b6105d1565b6102466102413660046108d2565b6105db565b005b34801561025457600080fd5b506001546102759073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f7565b3480156102a657600080fd5b506101bc610750565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190610976565b905080604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61037d9190610a4e565b91505090565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190610976565b5160070b92915050565b6000610433610458565b905090565b60606040518060600160405280603e8152602001610c26603e9139905090565b600154600080546040517f96834ad300000000000000000000000000000000000000000000000000000000815260048101919091529091829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190610976565b6060015192915050565b600154600080546040517f96834ad3000000000000000000000000000000000000000000000000000000008152600481019190915290918291829182918291829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190610976565b8051606090910151979860079190910b97965086955088945092505050565b60006105cb610383565b92915050565b60006105cb610458565b6001546040517fd47eed4500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063d47eed45906106349086908690600401610b36565b602060405180830381865afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190610c0c565b6001546040517fef9e5e2800000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063ef9e5e289083906106d09087908790600401610b36565b6000604051808303818588803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b50506040513393504792509050600081818185875af1925050503d8060008114610743576040519150601f19603f3d011682016040523d82523d6000602084013e610748565b606091505b505050505050565b600154600080546040517f96834ad3000000000000000000000000000000000000000000000000000000008152600481019190915290918291829182918291829173ffffffffffffffffffffffffffffffffffffffff909116906396834ad390602401608060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190610976565b60608101519051909760079190910b9650879550859450849350915050565b600060208083528351808285015260005b8181101561084057858101830151858201604001528201610824565b81811115610852576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561089857600080fd5b813569ffffffffffffffffffff811681146108b257600080fd5b9392505050565b6000602082840312156108cb57600080fd5b5035919050565b600080602083850312156108e557600080fd5b823567ffffffffffffffff808211156108fd57600080fd5b818501915085601f83011261091157600080fd5b81358181111561092057600080fd5b8660208260051b850101111561093557600080fd5b60209290920196919550909350505050565b805167ffffffffffffffff8116811461095f57600080fd5b919050565b8051600381900b811461095f57600080fd5b60006080828403121561098857600080fd5b6040516080810181811067ffffffffffffffff821117156109d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251600781900b81146109e757600080fd5b81526109f560208401610947565b6020820152610a0660408401610964565b6040820152606083015160608201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008082810b84820b82811383831382607f0484118282161615610a7457610a74610a1f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085841285820585128184161615610aae57610aae610a1f565b9585129583871685830587121615610ac857610ac8610a1f565b84607f0586128188161615610adf57610adf610a1f565b505050910295945050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60208082528181018390526000906040600585901b8401810190840186845b87811015610bff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087850301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a3603018112610bb657600080fd5b8901803567ffffffffffffffff811115610bcf57600080fd5b8036038b1315610bde57600080fd5b610beb8682898501610aed565b955050509184019190840190600101610b55565b5091979650505050505050565b600060208284031215610c1e57600080fd5b505191905056fe4120706f7274206f66206120636861696e6c696e6b2061676772656761746f7220706f77657265642062792070797468206e6574776f726b206665656473a26469706673582212206e12860f606bc1b231eadcdbf57802e2f3e4a9330e983ece299358a1977b8c6d64736f6c634300080a0033a2646970667358221220587e5ec2aa5a58389414bbd345215ea56c55e07ff281b1546c961479fae3eeb864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}